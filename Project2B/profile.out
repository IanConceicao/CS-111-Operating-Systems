Total: 456 samples
     370  81.1%  81.1%      456 100.0% doWork
      24   5.3%  86.4%       24   5.3% ?? /usr/src/debug////////glibc-2.17-c758a686/string/../sysdeps/x86_64/multiarch/strcmp-sse42.S:165
      10   2.2%  88.6%       10   2.2% ?? /usr/src/debug////////glibc-2.17-c758a686/string/../sysdeps/x86_64/multiarch/strcmp-sse42.S:1721
      10   2.2%  90.8%       48  10.5% SortedList_insert
       9   2.0%  92.8%       38   8.3% SortedList_lookup
       6   1.3%  94.1%        6   1.3% ?? /usr/src/debug////////glibc-2.17-c758a686/string/../sysdeps/x86_64/multiarch/strcmp-sse42.S:1729
       5   1.1%  95.2%        5   1.1% ?? /usr/src/debug////////glibc-2.17-c758a686/string/../sysdeps/x86_64/multiarch/strcmp-sse42.S:1720
       5   1.1%  96.3%        5   1.1% ?? /usr/src/debug////////glibc-2.17-c758a686/string/../sysdeps/x86_64/multiarch/strcmp-sse42.S:1730
       3   0.7%  96.9%        3   0.7% ?? /usr/src/debug////////glibc-2.17-c758a686/string/../sysdeps/x86_64/multiarch/strcmp-sse42.S:130
       3   0.7%  97.6%        3   0.7% ?? /usr/src/debug////////glibc-2.17-c758a686/string/../sysdeps/x86_64/multiarch/strcmp-sse42.S:160
       3   0.7%  98.2%        3   0.7% ?? /usr/src/debug////////glibc-2.17-c758a686/string/../sysdeps/x86_64/multiarch/strcmp-sse42.S:205
       3   0.7%  98.9%        3   0.7% _init
       2   0.4%  99.3%        2   0.4% ?? /usr/src/debug////////glibc-2.17-c758a686/string/../sysdeps/x86_64/multiarch/strcmp-sse42.S:200
       2   0.4%  99.8%        2   0.4% ?? /usr/src/debug////////glibc-2.17-c758a686/string/../sysdeps/x86_64/multiarch/strcmp-sse42.S:202
       1   0.2% 100.0%        1   0.2% ?? /usr/src/debug////////glibc-2.17-c758a686/string/../sysdeps/x86_64/multiarch/strcmp-sse42.S:203
       0   0.0% 100.0%      456 100.0% ?? /usr/src/debug////////glibc-2.17-c758a686/misc/../sysdeps/unix/sysv/linux/x86_64/clone.S:111
       0   0.0% 100.0%      456 100.0% start_thread
ROUTINE ====================== doWork in /u/cs/ugrad/conceica/cs111/Project2B/lab2_list.c
   370    456 Total samples (flat / cumulative)
     .      .  183:         sum += individual;
     .      .  184:     }
     .      .  185:     return sum;
     .      .  186: }
     .      .  187: 
---
     .      .  188: void* doWork(void* input){
     .      .  189:     int threadNum = *(int *)input;
     .      .  190: 
     .      .  191:     struct timespec start;
     .      .  192:     struct timespec end;
     .      .  193:     
     .      .  194:     //Create data structure
     .      .  195:     int i = threadNum;
     .      .  196:     for(;i < sizeOfList; i += numOfThreads){
     .      .  197:         int hashResult = hash(elements[i].key);
     .      .  198:         switch(syncMode){
     .      .  199:             case 'n':
     .      .  200:                 SortedList_insert(lists[hashResult], &elements[i]);
     .      .  201:                 break;
     .      .  202:             case 'm':
     .      .  203:                 setTime(&start);
     .      .  204:                 pthread_mutex_lock(&mutexes[hashResult]);
     .      .  205:                 endTime(&start, &end);
     .      .  206:                 SortedList_insert(lists[hashResult], &elements[i]);
     .      .  207: 				pthread_mutex_unlock(&mutexes[hashResult]);
     .      .  208: 				break;
     .      .  209:             case 's':
     .      .  210:                 setTime(&start);
   294    294  211:                 while(__sync_lock_test_and_set(&spinLocks[hashResult], 1)){};
     .      .  212:                 endTime(&start, &end);
     .     48  213:                 SortedList_insert(lists[hashResult], &elements[i]);
     .      .  214: 				__sync_lock_release(&spinLocks[hashResult]);
     .      .  215:                 break;
     .      .  216:         }
     .      .  217:     }
     .      .  218: 
     .      .  219:     i = 0;
     .      .  220:     int sum = 0;
     .      .  221:     int individual = 0;
     .      .  222:     //Get the length
     .      .  223:     switch(syncMode){
     .      .  224:             case 'n':
     .      .  225:                 for(;i<numOfLists;i++){
     .      .  226:                     individual = SortedList_length(lists[i]);
     .      .  227:                     if(individual==-1)
     .      .  228:                         listError("List corrupted on insertion of elements, failed to get length, exitting.");
     .      .  229:                     sum+=individual;
     .      .  230:                 }
     .      .  231:                 break;
     .      .  232:             case 'm':
     .      .  233: 
     .      .  234:                 for(;i<numOfLists;i++){
     .      .  235:                     setTime(&start);
     .      .  236:                     pthread_mutex_lock(&mutexes[i]);
     .      .  237:                     endTime(&start, &end);
     .      .  238: 
     .      .  239:                     individual = SortedList_length(lists[i]);
     .      .  240:                     if(individual==-1)
     .      .  241:                         listError("List corrupted on insertion of elements, failed to get length, exitting.");
     .      .  242:                     sum+=individual;
     .      .  243: 
     .      .  244:                     pthread_mutex_unlock(&mutexes[i]);
     .      .  245:                 }
     .      .  246: 				break;
     .      .  247:             case 's':
     .      .  248:                 for(;i<numOfLists;i++){
     .      .  249:                     setTime(&start);
     2      2  250:                     while(__sync_lock_test_and_set(&spinLocks[i], 1)){};
     .      .  251:                     endTime(&start, &end);
     .      .  252:                    
     .      .  253:                     individual = SortedList_length(lists[i]);
     .      .  254:                     if(individual==-1)
     .      .  255:                         listError("List corrupted on insertion of elements, failed to get length, exitting.");
     .      .  256:                     sum+=individual;
     .      .  257: 
     .      .  258:                     __sync_lock_release(&spinLocks[i]);
     .      .  259:                 
     .      .  260:                 }
     .      .  261:                 break;
     .      .  262:     }
     .      .  263: 
     .      .  264:     
     .      .  265:     //Look up and delete old
     .      .  266: 
     .      .  267:     SortedListElement_t* node;
     .      .  268: 
     .      .  269:     i = threadNum;
     .      .  270:     int delete = 0;
     .      .  271:     for(; i < sizeOfList; i += numOfThreads){
     .      .  272:         int hashResult = hash(elements[i].key);
     .      .  273:         switch(syncMode){
     .      .  274:             case 'n':
     .      .  275:                 node = SortedList_lookup(lists[hashResult], elements[i].key);
     .      .  276:                 delete = SortedList_delete(node);
     .      .  277:                 break;
     .      .  278:             case 'm':
     .      .  279:                 setTime(&start);
     .      .  280:                 pthread_mutex_lock(&mutexes[hashResult]);
     .      .  281:                 endTime(&start, &end);
     .      .  282:                 node = SortedList_lookup(lists[hashResult], elements[i].key);
     .      .  283:                 delete = SortedList_delete(node);
     .      .  284:                 pthread_mutex_unlock(&mutexes[hashResult]);
     .      .  285:                 break;
     .      .  286:             case 's':
     .      .  287:                 setTime(&start);
    73     73  288:                 while (__sync_lock_test_and_set(&spinLocks[hashResult], 1)){};
     .      .  289:                 endTime(&start, &end);
     1     39  290:                 node = SortedList_lookup(lists[hashResult], elements[i].key);
     .      .  291:                 delete = SortedList_delete(node);
     .      .  292: 				__sync_lock_release(&spinLocks[hashResult]);
     .      .  293:                 break;
     .      .  294:         }
     .      .  295:         if(!node)
     .      .  296:             listError("List corrupted! Element cannot be found");
     .      .  297:         if(delete)
     .      .  298:             listError("Failed deleting a node.");
     .      .  299:     }
     .      .  300:     return NULL;
     .      .  301: }
---
     .      .  302: 
     .      .  303: int main(int argc, char** argv){
     .      .  304: 	signal(SIGSEGV, catch);
     .      .  305: 
     .      .  306: 
ROUTINE ====================== doWork in /u/cs/ugrad/conceica/cs111/Project2B/lab2_list.c
   370    456 Total samples (flat / cumulative)
     .      .  183:         sum += individual;
     .      .  184:     }
     .      .  185:     return sum;
     .      .  186: }
     .      .  187: 
---
     .      .  188: void* doWork(void* input){
     .      .  189:     int threadNum = *(int *)input;
     .      .  190: 
     .      .  191:     struct timespec start;
     .      .  192:     struct timespec end;
     .      .  193:     
     .      .  194:     //Create data structure
     .      .  195:     int i = threadNum;
     .      .  196:     for(;i < sizeOfList; i += numOfThreads){
     .      .  197:         int hashResult = hash(elements[i].key);
     .      .  198:         switch(syncMode){
     .      .  199:             case 'n':
     .      .  200:                 SortedList_insert(lists[hashResult], &elements[i]);
     .      .  201:                 break;
     .      .  202:             case 'm':
     .      .  203:                 setTime(&start);
     .      .  204:                 pthread_mutex_lock(&mutexes[hashResult]);
     .      .  205:                 endTime(&start, &end);
     .      .  206:                 SortedList_insert(lists[hashResult], &elements[i]);
     .      .  207: 				pthread_mutex_unlock(&mutexes[hashResult]);
     .      .  208: 				break;
     .      .  209:             case 's':
     .      .  210:                 setTime(&start);
   294    294  211:                 while(__sync_lock_test_and_set(&spinLocks[hashResult], 1)){};
     .      .  212:                 endTime(&start, &end);
     .     48  213:                 SortedList_insert(lists[hashResult], &elements[i]);
     .      .  214: 				__sync_lock_release(&spinLocks[hashResult]);
     .      .  215:                 break;
     .      .  216:         }
     .      .  217:     }
     .      .  218: 
     .      .  219:     i = 0;
     .      .  220:     int sum = 0;
     .      .  221:     int individual = 0;
     .      .  222:     //Get the length
     .      .  223:     switch(syncMode){
     .      .  224:             case 'n':
     .      .  225:                 for(;i<numOfLists;i++){
     .      .  226:                     individual = SortedList_length(lists[i]);
     .      .  227:                     if(individual==-1)
     .      .  228:                         listError("List corrupted on insertion of elements, failed to get length, exitting.");
     .      .  229:                     sum+=individual;
     .      .  230:                 }
     .      .  231:                 break;
     .      .  232:             case 'm':
     .      .  233: 
     .      .  234:                 for(;i<numOfLists;i++){
     .      .  235:                     setTime(&start);
     .      .  236:                     pthread_mutex_lock(&mutexes[i]);
     .      .  237:                     endTime(&start, &end);
     .      .  238: 
     .      .  239:                     individual = SortedList_length(lists[i]);
     .      .  240:                     if(individual==-1)
     .      .  241:                         listError("List corrupted on insertion of elements, failed to get length, exitting.");
     .      .  242:                     sum+=individual;
     .      .  243: 
     .      .  244:                     pthread_mutex_unlock(&mutexes[i]);
     .      .  245:                 }
     .      .  246: 				break;
     .      .  247:             case 's':
     .      .  248:                 for(;i<numOfLists;i++){
     .      .  249:                     setTime(&start);
     2      2  250:                     while(__sync_lock_test_and_set(&spinLocks[i], 1)){};
     .      .  251:                     endTime(&start, &end);
     .      .  252:                    
     .      .  253:                     individual = SortedList_length(lists[i]);
     .      .  254:                     if(individual==-1)
     .      .  255:                         listError("List corrupted on insertion of elements, failed to get length, exitting.");
     .      .  256:                     sum+=individual;
     .      .  257: 
     .      .  258:                     __sync_lock_release(&spinLocks[i]);
     .      .  259:                 
     .      .  260:                 }
     .      .  261:                 break;
     .      .  262:     }
     .      .  263: 
     .      .  264:     
     .      .  265:     //Look up and delete old
     .      .  266: 
     .      .  267:     SortedListElement_t* node;
     .      .  268: 
     .      .  269:     i = threadNum;
     .      .  270:     int delete = 0;
     .      .  271:     for(; i < sizeOfList; i += numOfThreads){
     .      .  272:         int hashResult = hash(elements[i].key);
     .      .  273:         switch(syncMode){
     .      .  274:             case 'n':
     .      .  275:                 node = SortedList_lookup(lists[hashResult], elements[i].key);
     .      .  276:                 delete = SortedList_delete(node);
     .      .  277:                 break;
     .      .  278:             case 'm':
     .      .  279:                 setTime(&start);
     .      .  280:                 pthread_mutex_lock(&mutexes[hashResult]);
     .      .  281:                 endTime(&start, &end);
     .      .  282:                 node = SortedList_lookup(lists[hashResult], elements[i].key);
     .      .  283:                 delete = SortedList_delete(node);
     .      .  284:                 pthread_mutex_unlock(&mutexes[hashResult]);
     .      .  285:                 break;
     .      .  286:             case 's':
     .      .  287:                 setTime(&start);
    73     73  288:                 while (__sync_lock_test_and_set(&spinLocks[hashResult], 1)){};
     .      .  289:                 endTime(&start, &end);
     1     39  290:                 node = SortedList_lookup(lists[hashResult], elements[i].key);
     .      .  291:                 delete = SortedList_delete(node);
     .      .  292: 				__sync_lock_release(&spinLocks[hashResult]);
     .      .  293:                 break;
     .      .  294:         }
     .      .  295:         if(!node)
     .      .  296:             listError("List corrupted! Element cannot be found");
     .      .  297:         if(delete)
     .      .  298:             listError("Failed deleting a node.");
     .      .  299:     }
     .      .  300:     return NULL;
     .      .  301: }
---
     .      .  302: 
     .      .  303: int main(int argc, char** argv){
     .      .  304: 	signal(SIGSEGV, catch);
     .      .  305: 
     .      .  306: 
